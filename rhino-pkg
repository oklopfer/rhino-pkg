#!/bin/bash

tabs -4

export TEXTDOMAIN=rhino-pkg
if [[ -n $RHINOPKG_DEBUG ]]; then
    export TEXTDOMAINDIR="${PWD}/locale"
else
    export TEXTDOMAINDIR=/usr/share/locale
fi

# Colors
BOLD=$(tput bold)
declare -r BOLD
NORMAL=$(tput sgr0)
declare -r NORMAL
declare -r NC=$$'\033[0m'
declare -r BLINK=$'\e[5m'

export BOLD NORMAL NC BLINK
# Courtesy of https://stackoverflow.com/a/28938235/13449010

# https://no-color.org/
# shellcheck disable=SC2236
if [[ -z ${NO_COLOR} ]]; then
    # Regular Colors
    declare -r BLACK=$'\033[0;30m'  # Black
    declare -r RED=$'\033[0;31m'    # Red
    declare -r GREEN=$'\033[0;32m'  # Green
    declare -r YELLOW=$'\033[0;33m' # Yellow
    declare -r BLUE=$'\033[0;34m'   # Blue
    declare -r PURPLE=$'\033[0;35m' # Purple
    declare -r CYAN=$'\033[0;36m'   # Cyan
    declare -r WHITE=$'\033[0;37m'  # White

    # Bold
    declare -r BBlack=$'\033[1;30m'  # Black
    declare -r BRed=$'\033[1;31m'    # Red
    declare -r BGreen=$'\033[1;32m'  # Green
    declare -r BYellow=$'\033[1;33m' # Yellow
    declare -r BBlue=$'\033[1;34m'   # Blue
    declare -r BPurple=$'\033[1;35m' # Purple
    declare -r BCyan=$'\033[1;36m'   # Cyan
    declare -r BWhite=$'\033[1;37m'  # White

    # Underline
    declare -r UBlack=$'\033[4;30m'  # Black
    declare -r URed=$'\033[4;31m'    # Red
    declare -r UGreen=$'\033[4;32m'  # Green
    declare -r UYellow=$'\033[4;33m' # Yellow
    declare -r UBlue=$'\033[4;34m'   # Blue
    declare -r UPurple=$'\033[4;35m' # Purple
    declare -r UCyan=$'\033[4;36m'   # Cyan
    declare -r UWhite=$'\033[4;37m'  # White

    # Background
    declare -r On_Black=$'\033[40m'  # Black
    declare -r On_Red=$'\033[41m'    # Red
    declare -r On_Green=$'\033[42m'  # Green
    declare -r On_Yellow=$'\033[43m' # Yellow
    declare -r On_Blue=$'\033[44m'   # Blue
    declare -r On_Purple=$'\033[45m' # Purple
    declare -r On_Cyan=$'\033[46m'   # Cyan
    declare -r On_White=$'\033[47m'  # White

    # High Intensity
    declare -r IBlack=$'\033[0;90m'  # Black
    declare -r IRed=$'\033[0;91m'    # Red
    declare -r IGreen=$'\033[0;92m'  # Green
    declare -r IYellow=$'\033[0;93m' # Yellow
    declare -r IBlue=$'\033[0;94m'   # Blue
    declare -r IPurple=$'\033[0;95m' # Purple
    declare -r ICyan=$'\033[0;96m'   # Cyan
    declare -r IWhite=$'\033[0;97m'  # White

    # Bold High Intensity
    declare -r BIBlack=$'\033[1;90m'  # Black
    declare -r BIRed=$'\033[1;91m'    # Red
    declare -r BIGreen=$'\033[1;92m'  # Green
    declare -r BIYellow=$'\033[1;93m' # Yellow
    declare -r BIBlue=$'\033[1;94m'   # Blue
    declare -r BIPurple=$'\033[1;95m' # Purple
    declare -r BICyan=$'\033[1;96m'   # Cyan
    declare -r BIWhite=$'\033[1;97m'  # White

    # High Intensity backgrounds
    declare -r On_IBlack=$'\033[0;100m'  # Black
    declare -r On_IRed=$'\033[0;101m'    # Red
    declare -r On_IGreen=$'\033[0;102m'  # Green
    declare -r On_IYellow=$'\033[0;103m' # Yellow
    declare -r On_IBlue=$'\033[0;104m'   # Blue
    declare -r On_IPurple=$'\033[0;105m' # Purple
    declare -r On_ICyan=$'\033[0;106m'   # Cyan
    declare -r On_IWhite=$'\033[0;107m'  # White
else
    declare -r BLACK RED GREEN YELLOW BLUE PURPLE CYAN WHITE \
        BBlack BRed BGreen BYellow BBlue BPurple BCyan BWhite \
        UBlack URed UGreen UYellow UBlue UPurple UCyan UWhite \
        On_Black On_Red On_Green On_Yellow On_Blue On_Purple On_Cyan On_White \
        IBlack IRed IGreen IYellow IBlue IPurple ICyan IWhite \
        BIBlack BIRed BIGreen BIYellow BIBlue BIPurple BICyan BIWhite \
        On_IBlack On_IRed On_IGreen On_IYellow On_IBlue On_IPurple On_ICyan On_IWhite
fi

export BLACK RED GREEN YELLOW BLUE PURPLE CYAN WHITE \
    BBlack BRed BGreen BYellow BBlue BPurple BCyan BWhite \
    UBlack URed UGreen UYellow UBlue UPurple UCyan UWhite \
    On_Black On_Red On_Green On_Yellow On_Blue On_Purple On_Cyan On_White \
    IBlack IRed IGreen IYellow IBlue IPurple ICyan IWhite \
    BIBlack BIRed BIGreen BIYellow BIBlue BIPurple BICyan BIWhite \
    On_IBlack On_IRed On_IGreen On_IYellow On_IBlue On_IPurple On_ICyan On_IWhite

export c1=$'\u001b[38;5;104m' # light purple
export c2=$'\u001b[0m'        # white/reset
export c3=$'\u001b[38;5;55m'  # dark purple
export c4=$'\u001b[38;5;98m'  # medium purple

help_flag="USAGE: $(basename $0) [function] {flag} <input>

functions:
    install: Install package(s) - Prompts user to respond with 
             the number(s) associated with the desired package(s).
             
    remove:  Uninstall package(s) - Prompts user to respond with
             the number(s) associated with the desired package(s).
             
    search:  Search for package(s) - Does not have a second prompt.
    
    update:  Updates all packages accessible to the wrapper - does
             not accept <input>, instead use install to update 
             individual packages. Has confirmation prompt.

flags: 
    --help/-h: Display this page
    
    --description/-d: By default, $(basename $0) will only display packages 
    that contain <input> within their name. Use this flag to increase 
    range and display packages with <input> in their description.
    
input: 
    Provide a package name or description.

Example execution:
    \$ $(basename $0) install foobar
    Found packages matching '${BPurple}foobar${NC}':

    [${BGreen}0${NC}]: pyfoobar (${BGreen}apt${NC})
    [${BGreen}1${NC}]: foobarshell (${BGreen}apt${NC})
    [${BCyan}2${NC}]: foobar (${BCyan}flatpak${NC})
    [${BRed}3${NC}]: foobar-web (${BRed}snap${NC})
    [${BYellow}4${NC}]: foobar-bin (${BYellow}pacstall${NC})
    [${BYellow}5${NC}]: foobar-theme (${BYellow}pacstall${NC})

    Select which package to install [0-5]: 3 4 5
    Selecting '${BPurple}foobar-web${NC}' from package manager '${BPurple}snap${NC}'
    Selecting '${BPurple}foobar-bin${NC}' from package manager '${BPurple}pacstall${NC}'
    Selecting '${BPurple}foobar-theme${NC}' from package manager '${BPurple}pacstall${NC}'
    Are you sure? (${BGreen}y${NC}/${BRed}N${NC})
    [...]
      
${c1}       .;:;,.  .:       
${c1}    'coooooooo:oo.';.   
${c1}  ,oooooooooooooooo    ;
${c1} clllcccllloooooooo;c:'o
${c1}.${c3};${c4}';:::::::::${c1}cclooooooo'
${c3}''',${c4}::::::::::::::${c1}ccclc.
${c3}.'''${c4};::::::::::${c2}l${c4}::::::: 
${c3} ''''${c4},:::::::::${c2}kd${c4}.      
${c3} .'''''${c4},;::${c2}ck:${c2}oW${c4};       
${c3}   ''''''''${c2}kXOM.        
${c3}     .,,:${c2}dXMK           
${c3}       ${c2}:k

$(basename "$0") 0.0.2
A package manager wrapper for Pacstall, APT, Flatpak and snap
Developed by Henryws <hwengerstickel@protonmail.com> for the Rhino Linux distribution"

function msg() {
    local input="$*"
    echo -e "$input"
}

function prompt() {
    local input="$1"
    local index="$2"
    echo -ne "$input [0-$index]: ${BWhite}"
}

function clearscr() {
    tput cuu 1 && tput el
}

function search_pacstall() {
    if ! pacstall -S "$*" > /dev/null 2>&1; then
        return 1
    else
        # remove color codes
        local contents=("$(pacstall -S "$*" | sed 's/\x1B\[[0-9;]\{1,\}[A-Za-z]//g' | awk '{print $1}')")
    fi
    echo "${contents[@]}"
}

function search_apt() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(apt-cache search --names-only "$*" | awk '{print $1}')")
    else
        local contents=("$(apt-cache search "$*" | awk '{print $1}')")
    fi
    if [[ -n $contents ]]; then
        echo "${contents[@]}"
    else
        return 1
    fi
}

function search_flatpak() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(LC_ALL=C flatpak search --columns="application" "$*" | head -n +2 | grep -o "$*")")
    else
        local contents=("$(LC_ALL=C flatpak search --columns="application" "$*" | head -n +2)")
    fi
    if [[ ${contents[*]} == "No matches found" ]]; then
        return 1
    else
        echo "${contents[@]}"
    fi
}

function search_snap() {
    if [[ -z $DESCRIPTION ]]; then
        local contents=("$(snap find "$*" | awk '{ print $1 }' | tail -n +2 | grep -o "$*")")
    else
        local contents=("$(snap find "$*" | awk '{ print $1 }' | tail -n +2)")
    fi
    if [[ ${contents[*]} == "No matching snaps for"* ]]; then
        return 1
    else
        echo "${contents[@]}"
    fi
}

case "${1}" in
    search)
        SEARCH=true
        shift
        ;;
    install)
        INSTALL=true
        shift
        ;;
    -h | --help)
        echo "$help_flag"
        ;;
    *)
        echo "$help_flag"
        exit 1
        ;;
esac

if [[ $1 == "-d" || $1 == "--description" ]]; then
    DESCRIPTION=true
    shift
fi

if command -v pacstall &> /dev/null; then
    msg $"Searching Pacstall…"
    pacstall_search_list=($(search_pacstall $*))
    clearscr
fi
msg $"Searching apt…"
apt_search_list=($(search_apt $*))
clearscr
if command -v flatpak &> /dev/null; then
    msg $"Searching flatpak…"
    flatpak_search_list=($(search_flatpak $*))
    clearscr
fi
if command -v snap &> /dev/null; then
    msg $"Searching snap…"
    snap_search_list=($(search_snap $*))
    clearscr
fi

if [[ ${#pacstall_search_list} -eq 0 && ${#apt_search_list} -eq 0 && ${#flatpak_search_list} -eq 0 && ${#snap_search_list} -eq 0 ]]; then
    msg $"No packages found matching '$*'!"
    exit 1
fi

msg $"Found packages matching '${BPurple}$*${NC}':"
echo

count=0
pkgs=()
pkgrepo=()

for i in "${flatpak_search_list[@]}"; do
    echo -e "[${BCyan}$count${NC}]: $i (${BCyan}flatpak${NC})"
    pkgs+=("$i")
    pkgrepo+=("flatpak")
    ((count++))
done
for i in "${apt_search_list[@]}"; do
    echo -e "[${BGreen}$count${NC}]: $i (${BGreen}apt${NC})"
    pkgs+=("$i")
    pkgrepo+=("apt")
    ((count++))
done
for i in "${pacstall_search_list[@]}"; do
    echo -e "[${BYellow}$count${NC}]: $i (${BYellow}pacstall${NC})"
    pkgs+=("$i")
    pkgrepo+=("pacstall")
    ((count++))
done
for i in "${snap_search_list[@]}"; do
    echo -e "[${BRed}$count${NC}]: $i (${BRed}snap${NC})"
    pkgs+=("$i")
    pkgrepo+=("snap")
    ((count++))
done

((count--))

if [[ -n $SEARCH ]]; then
    exit 0
fi

echo

prompt $"Select which package to install" "$count"
read -ra entered_input
echo -ne "${NC}"
if [[ ! ${entered_input[*]} =~ ^(([0-9])\s?)+ ]]; then
    msg $"'${entered_input[*]}' is not a valid number"
    exit 1
fi

for i in "${!entered_input[@]}"; do
    msg $"Selecting '${BPurple}${pkgs[i]}${NC}' from package manager '${BPurple}${pkgrepo[i]}${NC}'"

    case "${pkgrepo[i]}" in
        flatpak)
            flatpak install "${pkgs[i]}" -y
            ret=$?
            ;;
        apt)
            if command -v nala &> /dev/null; then
                sudo nala install "${pkgs[i]}" -y
                ret=$?
            else
                sudo apt install "${pkgs[i]}" -y
                ret=$?
            fi
            ;;
        pacstall)
            pacstall -I "${pkgs[i]}"
            ret=$?
            ;;
        snap)
            sudo snap install "${pkgs[i]}"
            ret=$?
            ;;
        *)
            msg $"Invalid repository name!"
            exit 1
            ;;
    esac
done

exit "$ret"
